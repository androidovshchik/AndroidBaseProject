apply plugin: 'com.android.library'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'com.github.dcendents.android-maven'

apply plugin: 'org.jetbrains.dokka-android'

group = 'com.github.androidovshchik'

android {
    compileSdkVersion project.compileSdkVersion.toInteger()
    defaultConfig {
        minSdkVersion project.minSdkVersion.toInteger()
        targetSdkVersion project.targetSdkVersion.toInteger()
        versionCode project.versionCode.toInteger()
        versionName project.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation project(':core')
    implementation 'com.squareup.sqlbrite3:sqlbrite:3.2.0'
    implementation 'android.arch.persistence:db:1.1.1'
    implementation 'android.arch.persistence:db-framework:1.1.1'
    implementation "io.reactivex.rxjava2:rxandroid:$rx_android"
    implementation "io.reactivex.rxjava2:rxjava:$rx_java"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

dokka {
    outputFormat = 'html'
    //noinspection GroovyAccessibility
    outputDirectory = "$buildDir/kdoc"
}

task packageSources(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaAndroidTask) {
    outputFormat = 'javadoc'
    //noinspection GroovyAccessibility
    outputDirectory = "$buildDir/javadoc"
}

task javadocJar(type: Jar, dependsOn: 'dokkaJavadoc') {
    classifier = 'javadoc'
    from fileTree(new File(project.buildDir, 'javadoc'))
}

task dokkaJar(type: Jar, dependsOn: 'dokka') {
    classifier = 'kdoc'
    from fileTree(new File(project.buildDir, 'kdoc'))
}

artifacts {
    archives packageSources
    archives javadocJar
    archives dokkaJar
}